{"version":3,"sources":["constants.js","Api/index.js","Components/AutoCompleteField/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx","Components/AutoCompleteField/autoCompleteField.module.css"],"names":["KEYS_MAPPING","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","AutoCompleteField","onInputChange","event","inputValue","target","value","setState","slice","options","activeIndex","wordToBeSearched","split","filter","word","pop","searchedWord","debouncedSearch","getWordSuggestions","then","suggestions","showOptions","catch","console","error","onSelectOption","inputOption","state","undefined","concat","option","updatedValue","words","join","inputRef","current","focus","highlightOption","replace","RegExp","match","styles","highlight","handleKeyPress","keyCode","preventDefault","length","onOutsideClick","React","createRef","debounce","this","className","searchContainer","inputContainer","inputInnerContainer","inputSearch","ref","type","onChange","onKeyDown","optionsContainer","map","index","key","activeOption","onClick","dangerouslySetInnerHTML","__html","Component","Dashboard","Paths","Redirect","Routes","basename","process","path","component","from","to","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f2aa1b1e.chunk.js","sourcesContent":["export const KEYS_MAPPING = {\n  ENTER: 13,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n};\n","// Using mock code, as provided\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport { debounce } from \"lodash\";\nimport OnOutsiceClick from \"react-outclick\";\nimport styles from \"./autoCompleteField.module.css\";\nimport { KEYS_MAPPING } from \"../../constants\";\nimport getSuggestions from \"../../Api/index\";\n\nclass AutoCompleteField extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \"\",\n      options: [],\n      activeIndex: 0,\n      searchedWord: \"\",\n      showOptions: false,\n    };\n\n    this.inputRef = React.createRef();\n    this.debouncedSearch = debounce(this.getWordSuggestions, 400);\n  }\n\n  // On change of input value we have to search suggestions\n  onInputChange = (event) => {\n    const inputValue = event.target.value;\n    this.setState({ inputValue })\n\n    // Do not show suggestions if input value is empty string\n    if (inputValue !== \"\") {\n      const lastCharacter = inputValue.slice(-1);\n      // Do not show suggestions if last character is space(\" \")\n      if (lastCharacter === \" \") {\n        this.setState({ options: [], activeIndex: 0 });\n        return;\n      }\n\n      // Find suggestions based on last word\n      const inputs = inputValue.split(\" \").filter((word) => word !== \"\");\n      const wordToBeSearched = inputs.pop();\n\n      this.setState({ searchedWord: wordToBeSearched });\n      this.debouncedSearch(wordToBeSearched);\n    } else {\n      this.setState({ options: [], activeIndex: 0 });\n    }\n  }\n\n  getWordSuggestions = (word) => {\n    getSuggestions(word)\n      .then((suggestions) => {\n        this.setState({ options: suggestions, activeIndex: 0, showOptions: true });\n      })\n      .catch(console.error);\n  }\n\n  onSelectOption = (inputOption) => {\n    const { inputValue } = this.state;\n    // If API does not return any result and value is selected, setting the typed value with space\n    if (inputOption === undefined) {\n      this.setState({ inputValue: inputValue.concat(\" \") });\n    } else {\n      // Append suggestion and update  input value\n      const option = inputOption + \" \";\n\n      let updatedValue = inputValue;\n\n      if (inputValue !== \"\") {\n        const words = inputValue.split(\" \").slice(0, -1);\n        words.push(option);\n        updatedValue = words.join(\" \");\n      } else {\n        updatedValue.concat(option);\n      }\n      this.setState({ inputValue: updatedValue, activeIndex: 0, options: [] });\n    }\n\n    // Set focus to input on select\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  // Highlights the matched characters in suggestions\n  highlightOption = (option) => {\n    return option.replace(\n      new RegExp(this.state.searchedWord, \"gi\"),\n      (match) => `<span class=\"${styles.highlight}\">${match}</span>`\n    );\n  };\n\n  // Selecting suggestions through key press\n  handleKeyPress = (event) => {\n    const { activeIndex, options } = this.state;\n    if (event.keyCode === KEYS_MAPPING.ENTER) {\n      this.onSelectOption(options[activeIndex]);\n    } else if (event.keyCode === KEYS_MAPPING.UP_ARROW) {\n      event.preventDefault();\n      if (activeIndex === 0) {\n        return;\n      }\n      this.setState({ activeIndex: activeIndex - 1 });\n    } else if (event.keyCode === KEYS_MAPPING.DOWN_ARROW) {\n      event.preventDefault();\n      if (activeIndex === options.length - 1) {\n        return;\n      }\n      this.setState({ activeIndex: activeIndex + 1 });\n    }\n  };\n\n  onOutsideClick = () => {\n    this.setState({ showOptions: false })\n  }\n\n  render() {\n    return (\n    <OnOutsiceClick onOutsideClick={this.onOutsideClick}>\n      <div className={styles.searchContainer}>\n        <div className={styles.inputContainer}>\n          <div className={styles.inputInnerContainer}>\n            <input\n              className={styles.inputSearch}\n              ref={this.inputRef}\n              type=\"text\"\n              onChange={this.onInputChange}\n              onKeyDown={this.handleKeyPress}\n              value={this.state.inputValue}\n            />\n          </div>\n        </div>\n        {this.state.showOptions && this.state.options.length !== 0 && (\n          <div className={styles.optionsContainer}>\n            {this.state.options.map((option, index) => (\n              <div\n                key={option}\n                className={\n                  index === this.state.activeIndex ? styles.activeOption : styles.option\n                }\n                onClick={() => this.onSelectOption(option)}\n                dangerouslySetInnerHTML={{ __html: this.highlightOption(option) }}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </OnOutsiceClick>\n    );\n  }\n}\n\nexport default AutoCompleteField;\n","import React from \"react\";\nimport AutoCompleteField from \"../../Components/AutoCompleteField/\";\n\nconst Dashboard = () => (\n  <div className=\"col-md-4 offset-md-4\">\n    <AutoCompleteField />\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"autoCompleteField_searchContainer__3iOht\",\"inputContainer\":\"autoCompleteField_inputContainer__3YeW7\",\"inputInnerContainer\":\"autoCompleteField_inputInnerContainer__3Y2wf\",\"inputSearch\":\"autoCompleteField_inputSearch__1zYQ3\",\"optionsContainer\":\"autoCompleteField_optionsContainer__1II0r\",\"option\":\"autoCompleteField_option__3VBBc\",\"activeOption\":\"autoCompleteField_activeOption__3VwTT\",\"highlight\":\"autoCompleteField_highlight__1m1T5\"};"],"sourceRoot":""}